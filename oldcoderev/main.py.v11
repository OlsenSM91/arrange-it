from fastapi import FastAPI, File, UploadFile, HTTPException
from fastapi.responses import HTMLResponse, FileResponse
from starlette.background import BackgroundTask
from datetime import datetime
import uvicorn
import shutil
import os
import pandas as pd

app = FastAPI()

# Define a base directory for uploads
BASE_DIR = "uploads"
os.makedirs(BASE_DIR, exist_ok=True)

@app.get("/", response_class=HTMLResponse)
def read_root():
    return """
    <html>
        <head>
            <title>Upload Files</title>
            <script src="https://ajax.googleapis.com/ajax/libs/jquery/3.5.1/jquery.min.js"></script>
            <script>
                function uploadFiles(event) {
                    event.preventDefault();
                    var formData = new FormData(document.querySelector('form'));
                    $.ajax({
                        xhr: function() {
                            var xhr = new window.XMLHttpRequest();
                            xhr.upload.addEventListener("progress", function(evt) {
                                if (evt.lengthComputable) {
                                    var percentComplete = parseInt((evt.loaded / evt.total) * 100);
                                    document.getElementById('progressBar').style.width = percentComplete + '%';
                                    document.getElementById('progressBar').innerText = percentComplete + '%';
                                }
                            }, false);
                            return xhr;
                        },
                        url: '/upload/',
                        type: 'POST',
                        data: formData,
                        contentType: false,
                        processData: false,
                        success: function(data, status, xhr) {
                            alert('Files successfully uploaded and processed.');
                            window.location.href = xhr.getResponseHeader('Location');
                        },
                        error: function() {
                            alert('Error uploading files.');
                        },
                        xhrFields: {
                            responseType: 'blob'
                        }
                    });
                }
            </script>
            <style>
                #progressBar {
                    width: 0%;
                    height: 30px;
                    background-color: green;
                    color: white;
                    text-align: center;
                }
            </style>
        </head>
        <body>
            <h1>File Upload</h1>
            <form onsubmit="uploadFiles(event)">
                <input type="file" name="csv_file" required><br><br>
                <input type="file" name="image_files" multiple required><br><br>
                <button type="submit">Upload Files</button>
            </form>
            <div id="progressBar">0%</div>
        </body>
    </html>
    """

def organize_photos_by_team(csv_path, image_directory):
    df = pd.read_csv(csv_path)
    for index, row in df.iterrows():
        team_name = row['Team'].strip()
        photo_name = row['Photo'].strip()
        team_directory = os.path.join(image_directory, team_name)
        os.makedirs(team_directory, exist_ok=True)
        source_path = os.path.join(image_directory, photo_name)
        destination_path = os.path.join(team_directory, photo_name)
        if os.path.isfile(source_path):
            shutil.move(source_path, destination_path)

@app.post("/upload/")
async def process_files(csv_file: UploadFile = File(...), image_files: list[UploadFile] = File(...)):
    # Create a unique directory for this batch of uploads
    timestamp = datetime.now().strftime("%Y%m%d%H%M%S")
    batch_dir = os.path.join(BASE_DIR, timestamp)
    os.makedirs(batch_dir, exist_ok=True)

    csv_temp_path = os.path.join(batch_dir, csv_file.filename)
    with open(csv_temp_path, 'wb') as f:
        shutil.copyfileobj(csv_file.file, f)

    for image_file in image_files:
        image_path = os.path.join(batch_dir, image_file.filename)
        with open(image_path, 'wb') as f:
            shutil.copyfileobj(image_file.file, f)

    # Organize photos as per the CSV
    organize_photos_by_team(csv_temp_path, batch_dir)

    # Create a zip archive of the batch directory
    zip_path = shutil.make_archive(batch_dir, 'zip', batch_dir)
    zip_filename = f"{timestamp}_processed_images.zip"

    # Serve the file and clean up afterward
    response = FileResponse(zip_path, media_type='application/zip', filename=zip_filename)
    response.background = BackgroundTask(clean_up_files, batch_dir, zip_path)
    response.headers['Content-Disposition'] = f'attachment; filename="{zip_filename}"'
    return response

def clean_up_files(batch_dir, zip_path):
    shutil.rmtree(batch_dir)
    os.remove(zip_path)

if __name__ == "__main__":
    uvicorn.run(app, host="0.0.0.0", port=8000)
